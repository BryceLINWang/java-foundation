给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

**示例 1**:

```
输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
```

**示例 2:**

```
输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
```

```java
package Leetcode;

public class 乘积最大子序列 {
    public  static int maxProduct(int[] nums) {
        int len = nums.length;
        if (len == 0) {
            return 0;
        }
        int max=nums[0];
        int min=nums[0];
        int result=nums[0];
        for(int i=1;i<len;i++){
            int getmax=Math.max(Math.max(max*nums[i],min*nums[i]),nums[i]);
            int getmin=Math.min(Math.min(max*nums[i],min*nums[i]),nums[i]);
                    max=getmax;
                    min=getmin;

                    result=Math.max(result,max);
        }
        return result;
    }

    public static void main(String[] args) {
        int[] a = {2, 3, -2, 4};
        System.out.println(maxProduct(a));
    }
}
```
