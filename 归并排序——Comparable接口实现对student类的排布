学生类
```java
package edu;

import java.util.Comparator;



public class Student implements Comparable {
    int code;
    String name;
    char sex;
    public Student(int code,String name,char sex){
        this.code=code;
        this.name=name;
        this.sex=sex;
    }
    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public char getSex() {
        return sex;
    }

    public void setSex(char sex) {
        this.sex = sex;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Student{" +
                "code=" + code +
                ", name='" + name + '\'' +
                ", sex=" + sex +
                '}';
    }
    @Override
    public int compareTo(Object o) {
        if(o instanceof Student){
            Student s = (Student) o;
            if(this.getCode()> s.getCode()) return 1;
            else if(this.getCode()< s.getCode()) return -1;
            return 0;
        }
        throw new RuntimeException("类型不对，无法匹配");
    }
}
```

```java
package edu;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Collections {
    public static void sort(List list){
     int l=0;
     int r=list.size()-1;
     //归并
        devide(list,l,r);
    }
    /**
     * 归：分治
     */
    private static void devide(List list,int left, int right){
      //归
        int mid=(left+right)/2;
        if(left<right){

            devide(list,left,mid);
            devide(list,mid+1,right);
            //并
           merge(list,left,mid,mid+1,right);
        }
//        //并
//        merge(list,left,mid,mid+1,right);
    }

    /**
     *
     * @param list
     * @param left
     * @param mid
     * @param i
     * @param right
     */
    private static void merge(List list, int left, int mid, int i, int right) {
       Object[]temp= new Object[list.size()];
       int index=left;
       int ls=left,le=mid;//左起~左结束
       int rs=i,re=right;//右start~右end
        //至少把一边排好
        while(ls<=le&&rs<=re){
            Comparable o1=(Comparable)list.get(ls);
            Comparable o2=(Comparable)list.get(rs);
            if (o1.compareTo(o2)==-1){
                temp[index]=o1;
                ls++;
            }else{
                temp[index]=o2;
                rs++;
            }
            index++;
        }
        //判断左边是否有剩余
        if(ls<=le){
            for (int j=ls;j<=le;j++){
                temp[index++]=list.get(j);
            }
    }
       if (rs<=re){
           for (int j=rs;j<=re;j++){
               temp[index++]=list.get(j);
           }
       }
       for(int j=left;j<=right;j++){
           list.set(j,temp[j]);
       }
    }
//    class Rule implements Comparable<Integer>{
//        @Override
//    public int compareTo(Object o) {
//        if (this. > o) return -1;
//        if (< o) return 1;
//        return 0;
//    }
}
```
测试
```java
package edu;

import org.junit.Test;

import java.util.*;

public class CollectionTest {
     public void test3(){
        List s = new ArrayList();
        s.add(new Student(1111,"wamhgg",'M'));
        s.add(new Student(1113,"wamhsfg",'M'));
        s.add(new Student(1112,"wamhFSF",'M'));
        edu.Collections.sort(s);
        System.out.println(s);
    }
}
