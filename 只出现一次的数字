 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

**说明：**

    你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

**示例 1:**

    输入: [2,2,1]
    输出: 1

**示例 2:**

    输入: [4,1,2,1,2]
    输出: 4

利用异或计算
```java
class Solution {
    public int singleNumber(int[] nums) {
        int num=0;
        for(int i=0;i<nums.length;i++){
            num ^=nums[i];
        }
        return num;
    }
}
```
利用Set去重性
```java
class Solution {
    public int singleNumber(int[] nums) {
        Set<Integer>set=new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(!set.add(nums[i])){
                set.remove(nums[i]);
            }
        }
        return set.iterator().next();
    }
}
```

```java
package Leetcode;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class 只出现一次的数字 {
    public static int singleNumber(int[] nums) {
        int num=0;
        for(int i=0;i<nums.length;i++){
            num ^=nums[i];
        }
        return num;
    }
    public static void main(String[] args) throws Exception{
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        String []str=br.readLine().split(" ");
        int []nums=new int[str.length];
        for(int i=0;i<str.length;i++){
            nums[i]=Integer.parseInt(str[i]);
        }
        System.out.println(singleNumber(nums));
    }
}

```
